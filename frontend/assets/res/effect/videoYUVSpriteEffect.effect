// Copyright (c) 2017-2020 Xiamen Yaji Software Co., Ltd.
CCEffect %{
  techniques:
  - passes:
    - vert: sprite-vs:vert
      frag: sprite-fs:frag
      depthStencilState:
        depthTest: false
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      rasterizerState:
        cullMode: none
      properties:
        alphaThreshold: { value: 0.5 }
}%

CCProgram sprite-vs %{
  precision highp float;
  #include <builtin/uniforms/cc-global>
  #if USE_LOCAL
    #include <builtin/uniforms/cc-local>
  #endif
  #if SAMPLE_FROM_RT
    #include <common/common-define>
  #endif
  in vec3 a_position;
  in vec2 a_texCoord;
  in vec4 a_color;

  out vec4 color;
  out vec2 uv0;

  vec4 vert () {
    vec4 pos = vec4(a_position, 1);

    #if USE_LOCAL
      pos = cc_matWorld * pos;
    #endif

    #if USE_PIXEL_ALIGNMENT
      pos = cc_matView * pos;
      pos.xyz = floor(pos.xyz);
      pos = cc_matProj * pos;
    #else
      pos = cc_matViewProj * pos;
    #endif

    uv0 = a_texCoord;
    #if SAMPLE_FROM_RT
      CC_HANDLE_RT_SAMPLE_FLIP(uv0);
    #endif
    color = a_color;

    return pos;
  }
}%

CCProgram sprite-fs %{
  precision highp float;
  #include <builtin/internal/embedded-alpha>
  #include <builtin/internal/alpha-test>

  in vec4 color;
  in vec2 uv0;
  
  uniform sampler2D texture0;
  uniform sampler2D texture1;
  uniform sampler2D texture2;
 

  vec4 frag () {
    vec4 o = vec4(1, 1, 1, 1.0);
    float y = texture(texture0, uv0).r;
    float u = texture(texture1, uv0).r;
    float v = texture(texture2, uv0).r;
    mat4 YUV2RGB = mat4(
      vec4(1.16438,  0.00000,  1.59603, -0.87079),
      vec4(1.16438, -0.39176, -0.81297,  0.52959),
      vec4(1.16438,  2.01723,  0.00000, -1.08139),
      vec4(0, 0, 0, 1)
    );
    o = vec4(y, u, v, 1.0) * YUV2RGB;

    o *= color;
    ALPHA_TEST(o);
    return o;
  }
}%
